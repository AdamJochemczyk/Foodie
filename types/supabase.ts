/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/fav_users_products": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.fav_users_products.id"];
          user_id?: parameters["rowFilter.fav_users_products.user_id"];
          product_id?: parameters["rowFilter.fav_users_products.product_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["fav_users_products"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** fav_users_products */
          fav_users_products?: definitions["fav_users_products"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.fav_users_products.id"];
          user_id?: parameters["rowFilter.fav_users_products.user_id"];
          product_id?: parameters["rowFilter.fav_users_products.product_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.fav_users_products.id"];
          user_id?: parameters["rowFilter.fav_users_products.user_id"];
          product_id?: parameters["rowFilter.fav_users_products.product_id"];
        };
        body: {
          /** fav_users_products */
          fav_users_products?: definitions["fav_users_products"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/fav_users_recipes": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.fav_users_recipes.id"];
          user_id?: parameters["rowFilter.fav_users_recipes.user_id"];
          recipe_id?: parameters["rowFilter.fav_users_recipes.recipe_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["fav_users_recipes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** fav_users_recipes */
          fav_users_recipes?: definitions["fav_users_recipes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.fav_users_recipes.id"];
          user_id?: parameters["rowFilter.fav_users_recipes.user_id"];
          recipe_id?: parameters["rowFilter.fav_users_recipes.recipe_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.fav_users_recipes.id"];
          user_id?: parameters["rowFilter.fav_users_recipes.user_id"];
          recipe_id?: parameters["rowFilter.fav_users_recipes.recipe_id"];
        };
        body: {
          /** fav_users_recipes */
          fav_users_recipes?: definitions["fav_users_recipes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/product_in_fridge": {
    get: {
      parameters: {
        query: {
          product_in_fridge_id?: parameters["rowFilter.product_in_fridge.product_in_fridge_id"];
          user_id?: parameters["rowFilter.product_in_fridge.user_id"];
          product_id?: parameters["rowFilter.product_in_fridge.product_id"];
          product_count?: parameters["rowFilter.product_in_fridge.product_count"];
          measure?: parameters["rowFilter.product_in_fridge.measure"];
          best_before_date?: parameters["rowFilter.product_in_fridge.best_before_date"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["product_in_fridge"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** product_in_fridge */
          product_in_fridge?: definitions["product_in_fridge"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          product_in_fridge_id?: parameters["rowFilter.product_in_fridge.product_in_fridge_id"];
          user_id?: parameters["rowFilter.product_in_fridge.user_id"];
          product_id?: parameters["rowFilter.product_in_fridge.product_id"];
          product_count?: parameters["rowFilter.product_in_fridge.product_count"];
          measure?: parameters["rowFilter.product_in_fridge.measure"];
          best_before_date?: parameters["rowFilter.product_in_fridge.best_before_date"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          product_in_fridge_id?: parameters["rowFilter.product_in_fridge.product_in_fridge_id"];
          user_id?: parameters["rowFilter.product_in_fridge.user_id"];
          product_id?: parameters["rowFilter.product_in_fridge.product_id"];
          product_count?: parameters["rowFilter.product_in_fridge.product_count"];
          measure?: parameters["rowFilter.product_in_fridge.measure"];
          best_before_date?: parameters["rowFilter.product_in_fridge.best_before_date"];
        };
        body: {
          /** product_in_fridge */
          product_in_fridge?: definitions["product_in_fridge"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/product_recipes": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product_recipes.id"];
          product_id?: parameters["rowFilter.product_recipes.product_id"];
          recipe_id?: parameters["rowFilter.product_recipes.recipe_id"];
          product_count?: parameters["rowFilter.product_recipes.product_count"];
          measure?: parameters["rowFilter.product_recipes.measure"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["product_recipes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** product_recipes */
          product_recipes?: definitions["product_recipes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product_recipes.id"];
          product_id?: parameters["rowFilter.product_recipes.product_id"];
          recipe_id?: parameters["rowFilter.product_recipes.recipe_id"];
          product_count?: parameters["rowFilter.product_recipes.product_count"];
          measure?: parameters["rowFilter.product_recipes.measure"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product_recipes.id"];
          product_id?: parameters["rowFilter.product_recipes.product_id"];
          recipe_id?: parameters["rowFilter.product_recipes.recipe_id"];
          product_count?: parameters["rowFilter.product_recipes.product_count"];
          measure?: parameters["rowFilter.product_recipes.measure"];
        };
        body: {
          /** product_recipes */
          product_recipes?: definitions["product_recipes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/products": {
    get: {
      parameters: {
        query: {
          product_id?: parameters["rowFilter.products.product_id"];
          gtin_code?: parameters["rowFilter.products.gtin_code"];
          name?: parameters["rowFilter.products.name"];
          photo_link?: parameters["rowFilter.products.photo_link"];
          category?: parameters["rowFilter.products.category"];
          verified?: parameters["rowFilter.products.verified"];
          proposal_user_id?: parameters["rowFilter.products.proposal_user_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["products"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** products */
          products?: definitions["products"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          product_id?: parameters["rowFilter.products.product_id"];
          gtin_code?: parameters["rowFilter.products.gtin_code"];
          name?: parameters["rowFilter.products.name"];
          photo_link?: parameters["rowFilter.products.photo_link"];
          category?: parameters["rowFilter.products.category"];
          verified?: parameters["rowFilter.products.verified"];
          proposal_user_id?: parameters["rowFilter.products.proposal_user_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          product_id?: parameters["rowFilter.products.product_id"];
          gtin_code?: parameters["rowFilter.products.gtin_code"];
          name?: parameters["rowFilter.products.name"];
          photo_link?: parameters["rowFilter.products.photo_link"];
          category?: parameters["rowFilter.products.category"];
          verified?: parameters["rowFilter.products.verified"];
          proposal_user_id?: parameters["rowFilter.products.proposal_user_id"];
        };
        body: {
          /** products */
          products?: definitions["products"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/recipes": {
    get: {
      parameters: {
        query: {
          recipe_id?: parameters["rowFilter.recipes.recipe_id"];
          photo_link?: parameters["rowFilter.recipes.photo_link"];
          title?: parameters["rowFilter.recipes.title"];
          description?: parameters["rowFilter.recipes.description"];
          recipe_type?: parameters["rowFilter.recipes.recipe_type"];
          meal_portions?: parameters["rowFilter.recipes.meal_portions"];
          kcal_per_portion?: parameters["rowFilter.recipes.kcal_per_portion"];
          verified?: parameters["rowFilter.recipes.verified"];
          proposal_user_id?: parameters["rowFilter.recipes.proposal_user_id"];
          isvegan?: parameters["rowFilter.recipes.isvegan"];
          isvegetarian?: parameters["rowFilter.recipes.isvegetarian"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["recipes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** recipes */
          recipes?: definitions["recipes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          recipe_id?: parameters["rowFilter.recipes.recipe_id"];
          photo_link?: parameters["rowFilter.recipes.photo_link"];
          title?: parameters["rowFilter.recipes.title"];
          description?: parameters["rowFilter.recipes.description"];
          recipe_type?: parameters["rowFilter.recipes.recipe_type"];
          meal_portions?: parameters["rowFilter.recipes.meal_portions"];
          kcal_per_portion?: parameters["rowFilter.recipes.kcal_per_portion"];
          verified?: parameters["rowFilter.recipes.verified"];
          proposal_user_id?: parameters["rowFilter.recipes.proposal_user_id"];
          isvegan?: parameters["rowFilter.recipes.isvegan"];
          isvegetarian?: parameters["rowFilter.recipes.isvegetarian"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          recipe_id?: parameters["rowFilter.recipes.recipe_id"];
          photo_link?: parameters["rowFilter.recipes.photo_link"];
          title?: parameters["rowFilter.recipes.title"];
          description?: parameters["rowFilter.recipes.description"];
          recipe_type?: parameters["rowFilter.recipes.recipe_type"];
          meal_portions?: parameters["rowFilter.recipes.meal_portions"];
          kcal_per_portion?: parameters["rowFilter.recipes.kcal_per_portion"];
          verified?: parameters["rowFilter.recipes.verified"];
          proposal_user_id?: parameters["rowFilter.recipes.proposal_user_id"];
          isvegan?: parameters["rowFilter.recipes.isvegan"];
          isvegetarian?: parameters["rowFilter.recipes.isvegetarian"];
        };
        body: {
          /** recipes */
          recipes?: definitions["recipes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/users": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          email?: parameters["rowFilter.users.email"];
          usertype?: parameters["rowFilter.users.usertype"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["users"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** users */
          users?: definitions["users"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          email?: parameters["rowFilter.users.email"];
          usertype?: parameters["rowFilter.users.usertype"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          email?: parameters["rowFilter.users.email"];
          usertype?: parameters["rowFilter.users.usertype"];
        };
        body: {
          /** users */
          users?: definitions["users"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  fav_users_products: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    user_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `products.product_id`.<fk table='products' column='product_id'/>
     */
    product_id: string;
  };
  fav_users_recipes: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    user_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `recipes.recipe_id`.<fk table='recipes' column='recipe_id'/>
     */
    recipe_id: string;
  };
  product_in_fridge: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    product_in_fridge_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    user_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `products.product_id`.<fk table='products' column='product_id'/>
     */
    product_id: string;
    /**
     * Format: numeric
     * @default 1
     */
    product_count: number;
    /**
     * Format: public.measure_type
     * @enum {string}
     */
    measure:
      | "pinchg"
      | "kg"
      | "teaspoon"
      | "tablespoon"
      | "glassml"
      | "litr"
      | "piece";
    /** Format: date */
    best_before_date?: string;
  };
  product_recipes: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `products.product_id`.<fk table='products' column='product_id'/>
     */
    product_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `recipes.recipe_id`.<fk table='recipes' column='recipe_id'/>
     */
    recipe_id: string;
    /**
     * Format: numeric
     * @default 1
     */
    product_count?: number;
    /**
     * Format: public.measure_type
     * @enum {string}
     */
    measure:
      | "pinchg"
      | "kg"
      | "teaspoon"
      | "tablespoon"
      | "glassml"
      | "litr"
      | "piece";
  };
  products: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    product_id: string;
    /** Format: numeric */
    gtin_code: number;
    /** Format: text */
    name: string;
    /** Format: text */
    photo_link: string;
    /**
     * Format: public.product_category
     * @enum {string}
     */
    category:
      | "meat"
      | " eggs"
      | "fish"
      | " seafood"
      | "cereal products"
      | "milk"
      | " dairy products"
      | "preserves"
      | "drinks"
      | " juices"
      | " water"
      | "loose"
      | "spices"
      | "fruits"
      | "vegetables";
    /** Format: boolean */
    verified?: boolean;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    proposal_user_id: string;
  };
  recipes: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    recipe_id: string;
    /** Format: text */
    photo_link: string;
    /** Format: text */
    title: string;
    /** Format: text */
    description: string;
    /**
     * Format: public.recipe_type
     * @enum {string}
     */
    recipe_type: "breakfast" | "lunch" | "dinner" | "snacks" | "dessert";
    /** Format: numeric */
    meal_portions: number;
    /** Format: numeric */
    kcal_per_portion: number;
    /** Format: boolean */
    verified: boolean;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    proposal_user_id: string;
    /** Format: boolean */
    isvegan?: boolean;
    /** Format: boolean */
    isvegetarian?: boolean;
  };
  users: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: text */
    email: string;
    /**
     * Format: public.user_type
     * @default user
     * @enum {string}
     */
    usertype: "user" | "admin";
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description fav_users_products */
  "body.fav_users_products": definitions["fav_users_products"];
  /** Format: uuid */
  "rowFilter.fav_users_products.id": string;
  /** Format: uuid */
  "rowFilter.fav_users_products.user_id": string;
  /** Format: uuid */
  "rowFilter.fav_users_products.product_id": string;
  /** @description fav_users_recipes */
  "body.fav_users_recipes": definitions["fav_users_recipes"];
  /** Format: uuid */
  "rowFilter.fav_users_recipes.id": string;
  /** Format: uuid */
  "rowFilter.fav_users_recipes.user_id": string;
  /** Format: uuid */
  "rowFilter.fav_users_recipes.recipe_id": string;
  /** @description product_in_fridge */
  "body.product_in_fridge": definitions["product_in_fridge"];
  /** Format: uuid */
  "rowFilter.product_in_fridge.product_in_fridge_id": string;
  /** Format: uuid */
  "rowFilter.product_in_fridge.user_id": string;
  /** Format: uuid */
  "rowFilter.product_in_fridge.product_id": string;
  /** Format: numeric */
  "rowFilter.product_in_fridge.product_count": string;
  /** Format: public.measure_type */
  "rowFilter.product_in_fridge.measure": string;
  /** Format: date */
  "rowFilter.product_in_fridge.best_before_date": string;
  /** @description product_recipes */
  "body.product_recipes": definitions["product_recipes"];
  /** Format: uuid */
  "rowFilter.product_recipes.id": string;
  /** Format: uuid */
  "rowFilter.product_recipes.product_id": string;
  /** Format: uuid */
  "rowFilter.product_recipes.recipe_id": string;
  /** Format: numeric */
  "rowFilter.product_recipes.product_count": string;
  /** Format: public.measure_type */
  "rowFilter.product_recipes.measure": string;
  /** @description products */
  "body.products": definitions["products"];
  /** Format: uuid */
  "rowFilter.products.product_id": string;
  /** Format: numeric */
  "rowFilter.products.gtin_code": string;
  /** Format: text */
  "rowFilter.products.name": string;
  /** Format: text */
  "rowFilter.products.photo_link": string;
  /** Format: public.product_category */
  "rowFilter.products.category": string;
  /** Format: boolean */
  "rowFilter.products.verified": string;
  /** Format: uuid */
  "rowFilter.products.proposal_user_id": string;
  /** @description recipes */
  "body.recipes": definitions["recipes"];
  /** Format: uuid */
  "rowFilter.recipes.recipe_id": string;
  /** Format: text */
  "rowFilter.recipes.photo_link": string;
  /** Format: text */
  "rowFilter.recipes.title": string;
  /** Format: text */
  "rowFilter.recipes.description": string;
  /** Format: public.recipe_type */
  "rowFilter.recipes.recipe_type": string;
  /** Format: numeric */
  "rowFilter.recipes.meal_portions": string;
  /** Format: numeric */
  "rowFilter.recipes.kcal_per_portion": string;
  /** Format: boolean */
  "rowFilter.recipes.verified": string;
  /** Format: uuid */
  "rowFilter.recipes.proposal_user_id": string;
  /** Format: boolean */
  "rowFilter.recipes.isvegan": string;
  /** Format: boolean */
  "rowFilter.recipes.isvegetarian": string;
  /** @description users */
  "body.users": definitions["users"];
  /** Format: uuid */
  "rowFilter.users.id": string;
  /** Format: text */
  "rowFilter.users.email": string;
  /** Format: public.user_type */
  "rowFilter.users.usertype": string;
}

export interface operations {}

export interface external {}

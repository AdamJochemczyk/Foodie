/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/favusersproducts": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.favusersproducts.id"];
          userid?: parameters["rowFilter.favusersproducts.userid"];
          productid?: parameters["rowFilter.favusersproducts.productid"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["favusersproducts"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** favusersproducts */
          favusersproducts?: definitions["favusersproducts"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.favusersproducts.id"];
          userid?: parameters["rowFilter.favusersproducts.userid"];
          productid?: parameters["rowFilter.favusersproducts.productid"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.favusersproducts.id"];
          userid?: parameters["rowFilter.favusersproducts.userid"];
          productid?: parameters["rowFilter.favusersproducts.productid"];
        };
        body: {
          /** favusersproducts */
          favusersproducts?: definitions["favusersproducts"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/favusersrecipes": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.favusersrecipes.id"];
          userid?: parameters["rowFilter.favusersrecipes.userid"];
          recipeid?: parameters["rowFilter.favusersrecipes.recipeid"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["favusersrecipes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** favusersrecipes */
          favusersrecipes?: definitions["favusersrecipes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.favusersrecipes.id"];
          userid?: parameters["rowFilter.favusersrecipes.userid"];
          recipeid?: parameters["rowFilter.favusersrecipes.recipeid"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.favusersrecipes.id"];
          userid?: parameters["rowFilter.favusersrecipes.userid"];
          recipeid?: parameters["rowFilter.favusersrecipes.recipeid"];
        };
        body: {
          /** favusersrecipes */
          favusersrecipes?: definitions["favusersrecipes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/ingredients": {
    get: {
      parameters: {
        query: {
          ingredientid?: parameters["rowFilter.ingredients.ingredientid"];
          productid?: parameters["rowFilter.ingredients.productid"];
          recipeid?: parameters["rowFilter.ingredients.recipeid"];
          productcount?: parameters["rowFilter.ingredients.productcount"];
          measure?: parameters["rowFilter.ingredients.measure"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["ingredients"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** ingredients */
          ingredients?: definitions["ingredients"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          ingredientid?: parameters["rowFilter.ingredients.ingredientid"];
          productid?: parameters["rowFilter.ingredients.productid"];
          recipeid?: parameters["rowFilter.ingredients.recipeid"];
          productcount?: parameters["rowFilter.ingredients.productcount"];
          measure?: parameters["rowFilter.ingredients.measure"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          ingredientid?: parameters["rowFilter.ingredients.ingredientid"];
          productid?: parameters["rowFilter.ingredients.productid"];
          recipeid?: parameters["rowFilter.ingredients.recipeid"];
          productcount?: parameters["rowFilter.ingredients.productcount"];
          measure?: parameters["rowFilter.ingredients.measure"];
        };
        body: {
          /** ingredients */
          ingredients?: definitions["ingredients"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/products": {
    get: {
      parameters: {
        query: {
          productid?: parameters["rowFilter.products.productid"];
          gtincode?: parameters["rowFilter.products.gtincode"];
          productname?: parameters["rowFilter.products.productname"];
          photolink?: parameters["rowFilter.products.photolink"];
          category?: parameters["rowFilter.products.category"];
          verified?: parameters["rowFilter.products.verified"];
          proposaluserid?: parameters["rowFilter.products.proposaluserid"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["products"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** products */
          products?: definitions["products"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          productid?: parameters["rowFilter.products.productid"];
          gtincode?: parameters["rowFilter.products.gtincode"];
          productname?: parameters["rowFilter.products.productname"];
          photolink?: parameters["rowFilter.products.photolink"];
          category?: parameters["rowFilter.products.category"];
          verified?: parameters["rowFilter.products.verified"];
          proposaluserid?: parameters["rowFilter.products.proposaluserid"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          productid?: parameters["rowFilter.products.productid"];
          gtincode?: parameters["rowFilter.products.gtincode"];
          productname?: parameters["rowFilter.products.productname"];
          photolink?: parameters["rowFilter.products.photolink"];
          category?: parameters["rowFilter.products.category"];
          verified?: parameters["rowFilter.products.verified"];
          proposaluserid?: parameters["rowFilter.products.proposaluserid"];
        };
        body: {
          /** products */
          products?: definitions["products"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/recipes": {
    get: {
      parameters: {
        query: {
          recipeid?: parameters["rowFilter.recipes.recipeid"];
          photolink?: parameters["rowFilter.recipes.photolink"];
          title?: parameters["rowFilter.recipes.title"];
          description?: parameters["rowFilter.recipes.description"];
          recipetype?: parameters["rowFilter.recipes.recipetype"];
          mealportions?: parameters["rowFilter.recipes.mealportions"];
          kcalperportion?: parameters["rowFilter.recipes.kcalperportion"];
          verified?: parameters["rowFilter.recipes.verified"];
          proposaluserid?: parameters["rowFilter.recipes.proposaluserid"];
          isvegan?: parameters["rowFilter.recipes.isvegan"];
          isvegetarian?: parameters["rowFilter.recipes.isvegetarian"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["recipes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** recipes */
          recipes?: definitions["recipes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          recipeid?: parameters["rowFilter.recipes.recipeid"];
          photolink?: parameters["rowFilter.recipes.photolink"];
          title?: parameters["rowFilter.recipes.title"];
          description?: parameters["rowFilter.recipes.description"];
          recipetype?: parameters["rowFilter.recipes.recipetype"];
          mealportions?: parameters["rowFilter.recipes.mealportions"];
          kcalperportion?: parameters["rowFilter.recipes.kcalperportion"];
          verified?: parameters["rowFilter.recipes.verified"];
          proposaluserid?: parameters["rowFilter.recipes.proposaluserid"];
          isvegan?: parameters["rowFilter.recipes.isvegan"];
          isvegetarian?: parameters["rowFilter.recipes.isvegetarian"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          recipeid?: parameters["rowFilter.recipes.recipeid"];
          photolink?: parameters["rowFilter.recipes.photolink"];
          title?: parameters["rowFilter.recipes.title"];
          description?: parameters["rowFilter.recipes.description"];
          recipetype?: parameters["rowFilter.recipes.recipetype"];
          mealportions?: parameters["rowFilter.recipes.mealportions"];
          kcalperportion?: parameters["rowFilter.recipes.kcalperportion"];
          verified?: parameters["rowFilter.recipes.verified"];
          proposaluserid?: parameters["rowFilter.recipes.proposaluserid"];
          isvegan?: parameters["rowFilter.recipes.isvegan"];
          isvegetarian?: parameters["rowFilter.recipes.isvegetarian"];
        };
        body: {
          /** recipes */
          recipes?: definitions["recipes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/users": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          email?: parameters["rowFilter.users.email"];
          usertype?: parameters["rowFilter.users.usertype"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["users"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** users */
          users?: definitions["users"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          email?: parameters["rowFilter.users.email"];
          usertype?: parameters["rowFilter.users.usertype"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          email?: parameters["rowFilter.users.email"];
          usertype?: parameters["rowFilter.users.usertype"];
        };
        body: {
          /** users */
          users?: definitions["users"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  favusersproducts: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    userid: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `products.productid`.<fk table='products' column='productid'/>
     */
    productid: string;
  };
  favusersrecipes: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    userid: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `recipes.recipeid`.<fk table='recipes' column='recipeid'/>
     */
    recipeid: string;
  };
  ingredients: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    ingredientid: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `products.productid`.<fk table='products' column='productid'/>
     */
    productid: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `recipes.recipeid`.<fk table='recipes' column='recipeid'/>
     */
    recipeid: string;
    /**
     * Format: numeric
     * @default 1
     */
    productcount?: number;
    /**
     * Format: public.measure_type
     * @enum {string}
     */
    measure:
      | "pinch"
      | "g"
      | "kg"
      | "teaspoon"
      | "tablespoon"
      | "glass"
      | "ml"
      | "litr"
      | "piece";
  };
  products: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    productid: string;
    /** Format: numeric */
    gtincode: number;
    /** Format: text */
    productname: string;
    /** Format: text */
    photolink: string;
    /**
     * Format: public.product_category
     * @enum {string}
     */
    category:
      | "meat"
      | " eggs"
      | "fish"
      | " seafood"
      | "cereal products"
      | "milk"
      | " dairy products"
      | "preserves"
      | "drinks"
      | " juices"
      | " water"
      | "loose"
      | "spices"
      | "fruits"
      | "vegetables";
    /** Format: boolean */
    verified?: boolean;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    proposaluserid: string;
  };
  recipes: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    recipeid: string;
    /** Format: text */
    photolink: string;
    /** Format: text */
    title: string;
    /** Format: text */
    description: string;
    /**
     * Format: public.recipe_type
     * @enum {string}
     */
    recipetype: "breakfast" | "lunch" | "dinner" | "snacks" | "dessert";
    /** Format: numeric */
    mealportions: number;
    /** Format: numeric */
    kcalperportion: number;
    /** Format: boolean */
    verified: boolean;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    proposaluserid: string;
    /** Format: boolean */
    isvegan: boolean;
    /** Format: boolean */
    isvegetarian: boolean;
  };
  users: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: text */
    email: string;
    /**
     * Format: public.user_type
     * @default user
     * @enum {string}
     */
    usertype: "user" | "admin";
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description favusersproducts */
  "body.favusersproducts": definitions["favusersproducts"];
  /** Format: uuid */
  "rowFilter.favusersproducts.id": string;
  /** Format: uuid */
  "rowFilter.favusersproducts.userid": string;
  /** Format: uuid */
  "rowFilter.favusersproducts.productid": string;
  /** @description favusersrecipes */
  "body.favusersrecipes": definitions["favusersrecipes"];
  /** Format: uuid */
  "rowFilter.favusersrecipes.id": string;
  /** Format: uuid */
  "rowFilter.favusersrecipes.userid": string;
  /** Format: uuid */
  "rowFilter.favusersrecipes.recipeid": string;
  /** @description ingredients */
  "body.ingredients": definitions["ingredients"];
  /** Format: uuid */
  "rowFilter.ingredients.ingredientid": string;
  /** Format: uuid */
  "rowFilter.ingredients.productid": string;
  /** Format: uuid */
  "rowFilter.ingredients.recipeid": string;
  /** Format: numeric */
  "rowFilter.ingredients.productcount": string;
  /** Format: public.measure_type */
  "rowFilter.ingredients.measure": string;
  /** @description products */
  "body.products": definitions["products"];
  /** Format: uuid */
  "rowFilter.products.productid": string;
  /** Format: numeric */
  "rowFilter.products.gtincode": string;
  /** Format: text */
  "rowFilter.products.productname": string;
  /** Format: text */
  "rowFilter.products.photolink": string;
  /** Format: public.product_category */
  "rowFilter.products.category": string;
  /** Format: boolean */
  "rowFilter.products.verified": string;
  /** Format: uuid */
  "rowFilter.products.proposaluserid": string;
  /** @description recipes */
  "body.recipes": definitions["recipes"];
  /** Format: uuid */
  "rowFilter.recipes.recipeid": string;
  /** Format: text */
  "rowFilter.recipes.photolink": string;
  /** Format: text */
  "rowFilter.recipes.title": string;
  /** Format: text */
  "rowFilter.recipes.description": string;
  /** Format: public.recipe_type */
  "rowFilter.recipes.recipetype": string;
  /** Format: numeric */
  "rowFilter.recipes.mealportions": string;
  /** Format: numeric */
  "rowFilter.recipes.kcalperportion": string;
  /** Format: boolean */
  "rowFilter.recipes.verified": string;
  /** Format: uuid */
  "rowFilter.recipes.proposaluserid": string;
  /** Format: boolean */
  "rowFilter.recipes.isvegan": string;
  /** Format: boolean */
  "rowFilter.recipes.isvegetarian": string;
  /** @description users */
  "body.users": definitions["users"];
  /** Format: uuid */
  "rowFilter.users.id": string;
  /** Format: text */
  "rowFilter.users.email": string;
  /** Format: public.user_type */
  "rowFilter.users.usertype": string;
}

export interface operations {}

export interface external {}
